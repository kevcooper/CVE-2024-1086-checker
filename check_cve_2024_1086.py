import json
import re
import subprocess
import traceback
from pathlib import Path
from typing import Dict, List


def _sysctl(flags: List[str]) -> str:
    r = subprocess.run(["sysctl", *flags], capture_output=True)
    return r.stdout.decode() if r.returncode == 0 else ""


def text_to_kv(text: str) -> Dict[str, str]:
    kv_pattern: re.Pattern = re.compile(r"\s*?(.*?)\s*=\s*(.*)")
    items = text.splitlines()
    items = [i.strip() for i in items if i != ""]
    items = [i for i in items if not i.startswith("#")]
    items = [kv_pattern.findall(i) for i in items]
    items = [i[0] for i in items]
    items = [i for i in items if len(i) >= 2]
    return {x[0]: x[1] for x in items}


# https://nvd.nist.gov/vuln/detail/CVE-2024-1086
def check_version(version: str) -> bool:
    return any(
        [
            "3.15" <= version < "6.1.76",
            "6.2" <= version < "6.6.15",
            "6.7" <= version < "6.7.3",
            "6.8.0" <= version <= "6.8.0",
        ]
    )


def detect(version, kconfig, cmdline, sysctl):
    version = version.split("-")[0]
    if check_version(version):
        print(f"[+] version {version} is vulnerable")
        assert sysctl.get("kernel.unprivileged_userns_clone", "0") == "1"
        assert cmdline.get("init_on_free", "0") == "0"
        assert kconfig.get("CONFIG_INIT_ON_FREE_ON", "n") == "n"
        assert kconfig.get("CONFIG_USER_NS", "n") == "y"
        assert kconfig.get("CONFIG_NF_TABLES", "n") in ["m", "y"]
        if "6.4.0" <= version < "6.7.4":
            assert kconfig.get("CONFIG_INIT_ON_ALLOC", "n") == "n"
            assert cmdline.get("init_on_alloc", "0") == "0"
        return True
    else:
        print(f"[+] version {version} is not vulnerable")
    return False


def main():
    proc_cmdline: Path = Path("/proc/cmdline")
    proc_cmdline_text: str = proc_cmdline.read_text().strip()
    cmdline: Dict[str, str] = text_to_kv(proc_cmdline_text)
    cmdline = {
        k: v
        for k, v in cmdline.items()
        if k.lower() in ["init_on_alloc", "init_on_free"]
    }

    proc_version: Path = Path("/proc/version")
    proc_version_text: str = proc_version.read_text().strip()

    version_pattern: re.Pattern = re.compile(r"Linux version (.*?)\s")
    version_matches: str = version_pattern.findall(proc_version_text)
    version: str = version_matches[0] if version_matches else ""

    boot_config: Path = Path(f"/boot/config-{version}")
    boot_config_text: str = boot_config.read_text().strip()
    kconfig: Dict[str, str] = text_to_kv(boot_config_text)
    kconfig = {
        k: v
        for k, v in kconfig.items()
        if k.lower()
        in [
            "config_init_on_free_on",
            "config_init_on_alloc_on",
            "config_user_ns",
            "config_nf_tables",
        ]
    }

    sysctl_text: str = _sysctl(["-a"])
    sysctl: Dict[str, str] = text_to_kv(sysctl_text)
    sysctl = {
        k: v
        for k, v in sysctl.items()
        if k.lower() in ["kernel.unprivileged_userns_clone"]
    }

    print("=" * 64)
    print("CVE-2024-1086 Privesc Check")
    print("kernel version:", version)
    print("/boot/config*:", json.dumps(kconfig))
    print("/proc/cmdline:", json.dumps(cmdline))
    print("sysctl -a:", json.dumps(sysctl))

    try:
        if detect(version, kconfig, cmdline, sysctl):
            print("[+] WARNING! kernel is vulnerable")
    except AssertionError:
        exceptiondata = traceback.format_exc().splitlines()
        print("[+] you were saved by:", exceptiondata[-2].strip())
        print("[+] kernel config is not vulnerable")

    print("=" * 64)


if __name__ == "__main__":
    main()
