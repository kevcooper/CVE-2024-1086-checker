import json
import re
from pathlib import Path
from typing import Any, Dict, List

PROC_CMDLINE: Path = Path("/proc/cmdline")
PROC_MODULES: Path = Path(f"/proc/modules")
PROC_SYS_KERNEL_UNPRIVILEGED_USERNS_CLONE: Path = Path(
    "/proc/sys/kernel/unprivileged_userns_clone"
)
PROC_VERSION: Path = Path("/proc/version")
BOOT_CONFIG: Path = Path(f"/boot/config-{PROC_VERSION.read_text().split(' ')[2]}")


def mkcache():
    boot_config_text: str = BOOT_CONFIG.read_text().strip()
    kconfig: Dict[str, str] = text_to_kv(boot_config_text)

    proc_sys_kernel_unprivileged_userns_clone_text = (
        (PROC_SYS_KERNEL_UNPRIVILEGED_USERNS_CLONE.read_text().strip())
        if PROC_SYS_KERNEL_UNPRIVILEGED_USERNS_CLONE.exists()
        else None
    )

    proc_cmdline_text: str = PROC_CMDLINE.read_text().strip()
    cmdline: Dict[str, str] = text_to_kv(proc_cmdline_text)

    proc_modules_text: str = PROC_MODULES.read_text().strip()
    proc_modules_lines: List[str] = [l.strip() for l in proc_modules_text.splitlines()]
    proc_modules_lines = [l.split(" ") for l in proc_modules_lines]
    modules: Dict[str, str] = {x[0]: x[4] for x in proc_modules_lines}

    return {
        BOOT_CONFIG: kconfig,
        PROC_SYS_KERNEL_UNPRIVILEGED_USERNS_CLONE: proc_sys_kernel_unprivileged_userns_clone_text,
        PROC_CMDLINE: cmdline,
        PROC_MODULES: modules,
    }


def do_assert(key, actual, expected):
    assert actual in expected, f"{key}: expected any of {expected}, got {actual}"


def __check_kconfig(version, kconfig):
    do_assert(
        "CONFIG_INIT_ON_FREE_DEFAULT_ON",
        kconfig.get("CONFIG_INIT_ON_FREE_DEFAULT_ON"),
        [None, "n"],
    )
    do_assert("CONFIG_NF_TABLES", kconfig.get("CONFIG_NF_TABLES"), ["m", "y"])
    do_assert("CONFIG_USER_NS", kconfig.get("CONFIG_USER_NS"), ["y"])
    if "6.4.0" <= version:
        do_assert(
            "CONFIG_INIT_ON_ALLOC_DEFAULT_ON",
            kconfig.get("CONFIG_INIT_ON_ALLOC_DEFAULT_ON"),
            [None, "n"],
        )


def __check_unprivileged_userns_clone(version, unprivileged_userns_clone):
    do_assert("unprivileged_userns_clone", unprivileged_userns_clone, ["1"])


def __check_cmdline(version, cmdline):
    do_assert("init_on_free", cmdline.get("init_on_free"), [None, "0"])
    if "6.4.0" <= version:
        do_assert("init_on_alloc", cmdline.get("init_on_alloc"), [None, "0"])


def __check_modules(version, modules):
    do_assert("nf_tables", modules.get("nf_tables"), ["Live"])


def text_to_kv(text: str) -> Dict[str, str]:
    kv_pattern: re.Pattern = re.compile(r"\s*?(.*?)\s*=\s*(.*)")
    items = text.splitlines()
    items = [i.strip() for i in items if i != ""]
    items = [i for i in items if not i.startswith("#")]
    items = [kv_pattern.findall(i) for i in items]
    items = [i[0] for i in items]
    items = [i for i in items if len(i) >= 2]
    return {x[0]: x[1] for x in items}


# https://nvd.nist.gov/vuln/detail/CVE-2024-1086
def check_version(version: str) -> bool:
    return any(
        [
            "3.15" <= version < "6.1.76",
            "6.2" <= version < "6.6.15",
            "6.7" <= version < "6.7.3",
            "6.8.0" <= version <= "6.8.0",
        ]
    )


def detect(short_version, cache):
    __check_cmdline(short_version, cache.get(PROC_CMDLINE))
    __check_modules(short_version, cache.get(PROC_MODULES))
    __check_unprivileged_userns_clone(
        short_version, cache.get(PROC_SYS_KERNEL_UNPRIVILEGED_USERNS_CLONE)
    )
    __check_kconfig(short_version, cache.get(BOOT_CONFIG))

    return True


def print_data(cache):
    _relevant_kconfig = {
        k: v
        for k, v in cache.get(BOOT_CONFIG).items()
        if k
        in [
            "CONFIG_INIT_ON_ALLOC_DEFAULT_ON",
            "CONFIG_INIT_ON_FREE_DEFAULT_ON",
            "CONFIG_NF_TABLES",
            "CONFIG_USER_NS",
        ]
    }
    _relevant_cmdline = {
        k: v
        for k, v in cache.get(PROC_CMDLINE).items()
        if k in ["init_on_alloc", "init_on_free"]
    }
    _relevant_modules = {
        k: v for k, v in cache.get(PROC_MODULES).items() if k in ["nf_tables"]
    }
    print(f"{BOOT_CONFIG}:", json.dumps(_relevant_kconfig))
    print(f"{PROC_CMDLINE}:", json.dumps(_relevant_cmdline))
    print(f"{PROC_MODULES}:", json.dumps(_relevant_modules))
    print(
        f"{PROC_SYS_KERNEL_UNPRIVILEGED_USERNS_CLONE}:",
        json.dumps(cache.get(PROC_SYS_KERNEL_UNPRIVILEGED_USERNS_CLONE)),
    )


def main():
    proc_version_text: str = PROC_VERSION.read_text().strip()
    full_version: str = proc_version_text.split(" ")[2]
    short_version = full_version.split("-")[0]
    cache: Dict[str, Any] = mkcache()

    print("=" * 64)
    print("CVE-2024-1086 Privesc Check")
    print("kernel version:", full_version)
    print_data(cache)

    if check_version(short_version):
        print(f"[+] version {short_version} is vulnerable")
        try:
            if detect(short_version, cache):
                print("[+] WARNING! KERNEL CONFIG IS VULNERABLE")
        except AssertionError as e:
            print("[+] you were saved by:", str(e))
            print("[+] kernel config is not vulnerable")
    else:
        print(f"[+] version {short_version} is not vulnerable")

    print("=" * 64)


if __name__ == "__main__":
    main()
